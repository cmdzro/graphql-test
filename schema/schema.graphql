schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "batches"
"""
type batches {
  id: Int!
  quantity: Int!
  serialnumber: String!
  tx: String!
  user_id: Int
}

"""
aggregated selection of "batches"
"""
type batches_aggregate {
  aggregate: batches_aggregate_fields
  nodes: [batches!]!
}

"""
aggregate fields of "batches"
"""
type batches_aggregate_fields {
  avg: batches_avg_fields
  count(columns: [batches_select_column!], distinct: Boolean): Int!
  max: batches_max_fields
  min: batches_min_fields
  stddev: batches_stddev_fields
  stddev_pop: batches_stddev_pop_fields
  stddev_samp: batches_stddev_samp_fields
  sum: batches_sum_fields
  var_pop: batches_var_pop_fields
  var_samp: batches_var_samp_fields
  variance: batches_variance_fields
}

"""aggregate avg on columns"""
type batches_avg_fields {
  id: Float
  quantity: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "batches". All fields are combined with a logical 'AND'.
"""
input batches_bool_exp {
  _and: [batches_bool_exp!]
  _not: batches_bool_exp
  _or: [batches_bool_exp!]
  id: Int_comparison_exp
  quantity: Int_comparison_exp
  serialnumber: String_comparison_exp
  tx: String_comparison_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "batches"
"""
enum batches_constraint {
  """unique or primary key constraint"""
  batches_pkey
}

"""
input type for incrementing numeric columns in table "batches"
"""
input batches_inc_input {
  id: Int
  quantity: Int
  user_id: Int
}

"""
input type for inserting data into table "batches"
"""
input batches_insert_input {
  id: Int
  quantity: Int
  serialnumber: String
  tx: String
  user_id: Int
}

"""aggregate max on columns"""
type batches_max_fields {
  id: Int
  quantity: Int
  serialnumber: String
  tx: String
  user_id: Int
}

"""aggregate min on columns"""
type batches_min_fields {
  id: Int
  quantity: Int
  serialnumber: String
  tx: String
  user_id: Int
}

"""
response of any mutation on the table "batches"
"""
type batches_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [batches!]!
}

"""
on conflict condition type for table "batches"
"""
input batches_on_conflict {
  constraint: batches_constraint!
  update_columns: [batches_update_column!]! = []
  where: batches_bool_exp
}

"""Ordering options when selecting data from "batches"."""
input batches_order_by {
  id: order_by
  quantity: order_by
  serialnumber: order_by
  tx: order_by
  user_id: order_by
}

"""primary key columns input for table: batches"""
input batches_pk_columns_input {
  id: Int!
}

"""
select columns of table "batches"
"""
enum batches_select_column {
  """column name"""
  id

  """column name"""
  quantity

  """column name"""
  serialnumber

  """column name"""
  tx

  """column name"""
  user_id
}

"""
input type for updating data in table "batches"
"""
input batches_set_input {
  id: Int
  quantity: Int
  serialnumber: String
  tx: String
  user_id: Int
}

"""aggregate stddev on columns"""
type batches_stddev_fields {
  id: Float
  quantity: Float
  user_id: Float
}

"""aggregate stddev_pop on columns"""
type batches_stddev_pop_fields {
  id: Float
  quantity: Float
  user_id: Float
}

"""aggregate stddev_samp on columns"""
type batches_stddev_samp_fields {
  id: Float
  quantity: Float
  user_id: Float
}

"""aggregate sum on columns"""
type batches_sum_fields {
  id: Int
  quantity: Int
  user_id: Int
}

"""
update columns of table "batches"
"""
enum batches_update_column {
  """column name"""
  id

  """column name"""
  quantity

  """column name"""
  serialnumber

  """column name"""
  tx

  """column name"""
  user_id
}

"""aggregate var_pop on columns"""
type batches_var_pop_fields {
  id: Float
  quantity: Float
  user_id: Float
}

"""aggregate var_samp on columns"""
type batches_var_samp_fields {
  id: Float
  quantity: Float
  user_id: Float
}

"""aggregate variance on columns"""
type batches_variance_fields {
  id: Float
  quantity: Float
  user_id: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "batches"
  """
  delete_batches(
    """filter the rows which have to be deleted"""
    where: batches_bool_exp!
  ): batches_mutation_response

  """
  delete single row from the table: "batches"
  """
  delete_batches_by_pk(id: Int!): batches

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: Int!): users

  """
  insert data into the table: "batches"
  """
  insert_batches(
    """the rows to be inserted"""
    objects: [batches_insert_input!]!

    """on conflict condition"""
    on_conflict: batches_on_conflict
  ): batches_mutation_response

  """
  insert a single row into the table: "batches"
  """
  insert_batches_one(
    """the row to be inserted"""
    object: batches_insert_input!

    """on conflict condition"""
    on_conflict: batches_on_conflict
  ): batches

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """on conflict condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "batches"
  """
  update_batches(
    """increments the numeric columns with given value of the filtered values"""
    _inc: batches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: batches_set_input

    """filter the rows which have to be updated"""
    where: batches_bool_exp!
  ): batches_mutation_response

  """
  update single row of the table: "batches"
  """
  update_batches_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: batches_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: batches_set_input
    pk_columns: batches_pk_columns_input!
  ): batches

  """
  update data of the table: "users"
  """
  update_users(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "batches"
  """
  batches(
    """distinct select on columns"""
    distinct_on: [batches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [batches_order_by!]

    """filter the rows returned"""
    where: batches_bool_exp
  ): [batches!]!

  """
  fetch aggregated fields from the table: "batches"
  """
  batches_aggregate(
    """distinct select on columns"""
    distinct_on: [batches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [batches_order_by!]

    """filter the rows returned"""
    where: batches_bool_exp
  ): batches_aggregate!

  """fetch data from the table: "batches" using primary key columns"""
  batches_by_pk(id: Int!): batches

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users
}

type subscription_root {
  """
  fetch data from the table: "batches"
  """
  batches(
    """distinct select on columns"""
    distinct_on: [batches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [batches_order_by!]

    """filter the rows returned"""
    where: batches_bool_exp
  ): [batches!]!

  """
  fetch aggregated fields from the table: "batches"
  """
  batches_aggregate(
    """distinct select on columns"""
    distinct_on: [batches_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [batches_order_by!]

    """filter the rows returned"""
    where: batches_bool_exp
  ): batches_aggregate!

  """fetch data from the table: "batches" using primary key columns"""
  batches_by_pk(id: Int!): batches

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): [users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  users_aggregate(
    """distinct select on columns"""
    distinct_on: [users_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): users_aggregate!

  """fetch data from the table: "users" using primary key columns"""
  users_by_pk(id: Int!): users
}

"""
columns and relationships of "users"
"""
type users {
  address: String!
  id: Int!
}

"""
aggregated selection of "users"
"""
type users_aggregate {
  aggregate: users_aggregate_fields
  nodes: [users!]!
}

"""
aggregate fields of "users"
"""
type users_aggregate_fields {
  avg: users_avg_fields
  count(columns: [users_select_column!], distinct: Boolean): Int!
  max: users_max_fields
  min: users_min_fields
  stddev: users_stddev_fields
  stddev_pop: users_stddev_pop_fields
  stddev_samp: users_stddev_samp_fields
  sum: users_sum_fields
  var_pop: users_var_pop_fields
  var_samp: users_var_samp_fields
  variance: users_variance_fields
}

"""aggregate avg on columns"""
type users_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  address: String_comparison_exp
  id: Int_comparison_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """unique or primary key constraint"""
  users_pkey
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  id: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  address: String
  id: Int
}

"""aggregate max on columns"""
type users_max_fields {
  address: String
  id: Int
}

"""aggregate min on columns"""
type users_min_fields {
  address: String
  id: Int
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
on conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  address: order_by
  id: order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: Int!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  address

  """column name"""
  id
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  address: String
  id: Int
}

"""aggregate stddev on columns"""
type users_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type users_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type users_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type users_sum_fields {
  id: Int
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  address

  """column name"""
  id
}

"""aggregate var_pop on columns"""
type users_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type users_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type users_variance_fields {
  id: Float
}

